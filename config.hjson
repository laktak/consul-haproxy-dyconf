#hjson (go to http://hjson.org for details)
{
  # define the controller that fetches the configuration and produces the content for outputFile
  controller: controller.js
  outputFile: /etc/haproxy/haproxy.cfg

  # refresh interval in seconds
  refreshInterval: 5

  # logfile to tail to the console (can be "")
  logFile: /var/log/haproxy.log

  # run on start/restart to configure rsyslog and launch haproxy
  startup:
    '''
    # prepare and run rsyslog
    sed 's/#$ModLoad imudp/$ModLoad imudp/' -i /etc/rsyslog.conf
    sed 's/#$UDPServerRun 514/$UDPServerRun 514\n$UDPServerAddress 127.0.0.1\n/' -i /etc/rsyslog.conf
    mkdir -p /etc/rsyslog.d/
    echo -e 'local2.*    /var/log/haproxy.log\n' > /etc/rsyslog.d/haproxy.conf
    rsyslogd

    # launch haproxy (will log to tail from which it's printed to the console)
    haproxy -f /etc/haproxy/haproxy.cfg
    '''

  # to reload a new configuration with minimal service impact and without breaking existing sessions
  reload: haproxy -f /etc/haproxy/haproxy.cfg -sf $(cat /var/run/haproxy.pid)

  # kill haproxy on shutdown
  shutdown:
    '''
    PID=$(cat /var/run/haproxy.pid)
    kill -9 $PID
    wait $PID
    '''

  # define the template to generate the haproxy.cfg
  /*
  services was generated by the code in controller.js and contains data in
  the following format:
  [ {
    name: 'MyService',
    tags: [ 'rest' ],
    nodes: [ {
      node: 'hostname',
      address: '10.1.1.2',
      serviceID: 'hostname:foo:80',
      serviceName: 'foo-bar-80',
      serviceTags: [],
      serviceAddress: '10.0.0.42',
      servicePort: 80,
      }, ... ]
    }, ... ]
  */
  template:
    '''
    global
      daemon
      chroot      /var/lib/haproxy
      pidfile     /var/run/haproxy.pid
      maxconn     4000
      user        haproxy
      group       haproxy
      log 127.0.0.1   local0
      log 127.0.0.1   local1 notice
      log 127.0.0.1   local2

    defaults
      mode http
      log global
      option httplog
      option dontlognull
      retries 3
      timeout http-request    10s
      timeout queue           1m
      timeout connect         10s
      timeout client          1m
      timeout server          1m
      timeout http-keep-alive 10s
      timeout check           10s
      maxconn                 3000

    frontend http-in
      bind *:80
    <% services.forEach(svc => {
    %>  acl app_<%=svc.name%> path_beg -i /<%=svc.name%>/
      use_backend svr_<%=svc.name%> if app_<%=svc.name%>
    <% }); %>

    <% services.forEach(svc => {
    %>backend svr_<%=svc.name%>
      mode http
      balance roundrobin
      option forwardfor
      option httpchk HEAD /health HTTP/1.1\r\nHost:localhost
      reqrep ^([^\ ]*\ /)<%=svc.name%>[/]?(.*)   \1\2
    <%   svc.nodes.forEach(node => {
    %>  server <%=node.node%>_<%=node.servicePort%> <%=node.serviceAddress%>:<%=node.servicePort%> check
    <%   }); %>
    <% });
    %>
    listen stats
      bind *:1936
      mode http
      stats enable
      stats uri /
      stats hide-version
      stats auth stat:view
    '''
}
